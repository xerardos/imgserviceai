# Documentación de Producto (PDD) - Landing Page "Flux" IA Retratos
# Versión 1.0 - Estado Actual a 07/06/2025

---
## PARTE A: DESCRIPCIÓN DEL PRODUCTO IMPLEMENTADO
---

### 1. Visión General y Objetivos del Sitio Actual

La landing page "Flux" es un portal especializado en servicios de generación y edición de retratos mediante inteligencia artificial. El sitio está diseñado para captar clientes (modelos, actores, influencers, creadores de contenido) que buscan imágenes profesionales de alta calidad con eficiencia, variedad y control.

**Objetivos Cumplidos por la Versión Actual:**

*   **Captación de Clientes:** Presenta una oferta clara y profesional para atraer a la audiencia objetivo.
*   **Comunicación de Valor:** Comunica eficazmente los beneficios de eficiencia, variedad, realismo y control.
*   **Conversión:** Guía al usuario a través de un embudo de ventas visualmente impactante, desde la presentación de características hasta la tabla de precios y testimonios.
*   **Posicionamiento:** Establece el servicio como una alternativa premium y moderna a la fotografía tradicional.

### 2. Arquitectura de Componentes de la Landing Page

La página principal (`index.astro`) está construida con una arquitectura modular basada en componentes de Astro. El orden y la función de los componentes implementados es el siguiente:

1.  **`Hero.astro`**:
    *   **Función:** Captura la atención inicial del usuario.
    *   **Características:**
        *   Presenta el titular principal: "Transforma tu imagen profesional en minutos, no en horas".
        *   Muestra un carrusel de imágenes de retratos como fondo con un efecto de desvanecimiento.
        *   Incluye dos CTAs principales ("Crear mi primer retrato IA", "Ver transformación gratis") que dirigen a la sección de precios.
        *   Implementa un efecto de "luz" interactivo que sigue al cursor del ratón en dispositivos de escritorio.

2.  **`FeatureControl.astro`**, **`FeatureVersatility.astro`**, **`FeatureRealism.astro`**, **`FeatureStyles.astro`**:
    *   **Función:** Detallan la propuesta de valor del servicio a través de secciones de características específicas.
    *   **Características:** Cada componente se enfoca en un beneficio clave (Control, Versatilidad, Realismo, Estilos), combinando texto descriptivo con elementos visuales.

3.  **`FeatureProcess.astro`**:
    *   **Función:** Explica el proceso de trabajo de forma sencilla y visual.
    *   **Características:** Muestra un flujo de 3 pasos (Sube, Elige, Recibe) para que el usuario entienda la simplicidad del servicio.

4.  **`Gallery.astro`**:
    *   **Función:** Proporciona pruebas visuales de la calidad del trabajo.
    *   **Características:** Muestra una galería de retratos generados por IA, demostrando la calidad y variedad de los resultados.

5.  **`Urgency.astro`**:
    *   **Función:** Crea un sentido de escasez para incentivar la conversión.
    *   **Características:** Incluye elementos de marketing de urgencia.

6.  **`Pricing.astro`**:
    *   **Función:** Presenta los diferentes paquetes de servicios.
    *   **Características:** Muestra una tabla comparativa de 3 niveles (Básico, Pro, Premium) con sus respectivos precios, características y un CTA para cada uno.

7.  **`Testimonials.astro`**:
    *   **Función:** Genera confianza y prueba social.
    *   **Características:** Muestra testimonios de clientes satisfechos.

8.  **`ROICalculator.astro`**:
    *   **Función:** Justifica la inversión de forma tangible.
    *   **Características:** Herramienta interactiva que permite a los usuarios calcular el ahorro potencial al usar el servicio en comparación con una sesión de fotos tradicional.

9.  **`Quiz.astro`**:
    *   **Función:** Captura leads de forma interactiva y segmenta a la audiencia.
    *   **Características:** Un cuestionario que guía al usuario para definir sus necesidades de imagen, funcionando como un formulario de contacto avanzado.

### 3. Pila Tecnológica y Patrones de Implementación

*   **Framework Principal:** **Astro.js**. Se utiliza para construir un sitio mayormente estático (MPA) con excelente rendimiento.
*   **Componentización:** La lógica, estructura y estilos están encapsulados dentro de componentes `.astro`, siguiendo las mejores prácticas del framework.
*   **Estilos:** Se utiliza **CSS estándar** con `scoped styles` dentro de los componentes para evitar colisiones de clases.
*   **Interactividad:** La interactividad del lado del cliente (como en `Hero.astro` y `ROICalculator.astro`) se implementa con **JavaScript nativo (vanilla JS)**, ejecutado a través de los scripts de Astro (`<script>`). No se utiliza la librería `Surreal.js` propuesta en el PRD inicial.
*   **Desarrollo:** El entorno de desarrollo se basa en **Windows 11 con Bash-Git shell** y se ejecuta con `npm run dev`.