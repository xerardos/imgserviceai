# Documento de Requisitos del Producto (PRD): Landing Page de Flux

## 1. Resumen y Visión General

El proyecto consiste en el desarrollo y mantenimiento de una landing page para "Flux", un servicio o producto innovador. El sitio web debe ser moderno, atractivo y estar optimizado para la conversión. Está construido con Astro, lo que sugiere un enfoque en el rendimiento y el SEO. El sitio es multilingüe (español e inglés), lo que indica un alcance internacional.

## 2. Objetivos del Proyecto

*   **Presentar Flux:** Comunicar de manera clara y efectiva qué es Flux, sus características y beneficios.
*   **Captura de Leads:** Animar a los visitantes a realizar una acción específica, como solicitar una demostración, registrarse o ponerse en contacto.
*   **Educación del Usuario:** Proporcionar información detallada sobre el producto a través de diferentes secciones.
*   **Generar Confianza:** Mostrar pruebas sociales como testimonios para construir credibilidad.

## 3. Alcance y Características

La landing page se compone de las siguientes secciones o componentes principales:

*   **`Navbar`:** Navegación principal con enlaces a las diferentes secciones de la página y un posible CTA (Call to Action).
*   **`LanguageSwitcher`:** Componente para cambiar entre los idiomas disponibles (español e inglés).
*   **`Hero`:** La sección principal de bienvenida. Debe captar la atención del usuario con un titular potente, una breve descripción y un CTA claro.
*   **`Features`:** Una serie de componentes que destacan las características clave del producto:
    *   `FeatureControl`
    *   `FeatureVersatility`
    *   `FeatureRealism`
    *   `FeatureStyles`
    *   `FeatureProcess`
*   **`Gallery`:** Una sección para mostrar visualmente el producto en acción, posiblemente con capturas de pantalla o ejemplos.
*   **`Urgency`:** Un componente diseñado para crear un sentido de urgencia y motivar la acción inmediata.
*   **`Pricing`:** Tabla o sección que detalla los diferentes planes y precios del servicio.
*   **`Testimonials`:** Testimonios de clientes para generar confianza y prueba social.
*   **`ROICalculator`:** Una herramienta interactiva para que los usuarios calculen el retorno de la inversión potencial al usar Flux.
*   **`Quiz`:** Un cuestionario interactivo para atraer a los usuarios y posiblemente segmentarlos o guiarlos hacia la solución correcta.
*   **`WhatsAppButton`:** Un botón flotante o fijo para facilitar el contacto directo a través de WhatsApp.

## 4. Requisitos Técnicos

*   **Entorno:** Windows 11 con Git-bash como terminal, usa siempre rutas absolutas para llamar a las herramientas mcp y para comandos y siempre 1 solo slash en formato /
*   **Framework:** Astro
*   **Lenguajes:** TypeScript, JavaScript
*   **Internacionalización (i18n):** Soporte para español (`es`) e inglés (`en`) utilizando archivos JSON. La lógica de enrutamiento y traducción está gestionada en `src/i18n/ui.ts` y las páginas se duplican en `src/pages/en` y `src/pages/es`.
*   **Estilos:** No se especifica un framework de CSS, pero se asume CSS moderno o Tailwind CSS dado el ecosistema de Astro.
*   **Despliegue:** El objetivo final es tener un sitio estático o renderizado en servidor (SSR) de alto rendimiento.

## 5. Plan de Tareas de Alto Nivel

1.  **Configuración del Proyecto:** Inicializar el repositorio, configurar Astro y las dependencias. (Ya completado)
2.  **Desarrollo del Layout Base:** Crear el `Layout.astro` principal que incluirá la estructura común, metadatos, y la importación de estilos globales.
3.  **Implementación de la Internacionalización (i18n):** Configurar los archivos de traducción y el switcher de idioma.
4.  **Desarrollo de Componentes:** Crear cada uno de los componentes de Astro de forma individual.
5.  **Ensamblaje de las Páginas:** Construir las páginas de índice para cada idioma (`/en`, `/es`) importando y organizando los componentes.
6.  **Estilos y Diseño:** Aplicar un diseño visual consistente y responsivo a todo el sitio.
7.  **Optimización y Rendimiento:** Auditar el sitio con herramientas como Lighthouse y optimizar las imágenes, el CSS y el JavaScript.
8.  **Pruebas:** Realizar pruebas funcionales (que los enlaces funcionen, que los componentes interactivos se comporten como se espera) y de visualización en diferentes dispositivos.
9.  **Configuración del Despliegue:** Preparar la configuración para el despliegue en una plataforma como Vercel, Netlify o similar.
